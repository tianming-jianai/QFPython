# 在Thread和Process中，应当优选Process,因为Process更稳定，而且Process可以分布到多台机器上，而Thread最多只能分布到一台机器的多个CPU上

# multiprocessing 的 mangers 子模块支持把多进程分布到多台机器上，一个服务进程可以作为调度者，将任务分布到其他进程中，依靠网络通信。


# 举个例子：如果我们已经有一个通过Queue通信的多进程程序在同一台机器上运行，现在，由于处理任务的进程任务繁
# 重，希望把发送任务的进程和处理任务的进程分布到两台机器上。怎么用分布式进程实现？

# --> 原有的Queue可以继续使用，但是，通过managers模块把Queue通过网络暴露出去，就可以让其他机器的进程访问Queue了

# 这个简单的Master/Worker模型有什么用？其实这就是一个简单但真正的分布式计算，把代码稍加改造，启动多个
# worker，就可以把任务分布到几台甚至几十台机器上，比如把计算n*n的代码换成发送邮件，就实现了邮件队列的异步
# 发送。

# Python的分布式进程接口简单，封装良好，适合需要把繁重任务分布到多台机器的环境下。
# 注意Queue的作用是用来传递任务和接收结果，每个任务的描述数据量要尽量小。比如发送一个处理日志文件的任务，
# 就不要发送几百兆的日志文件本身，而是发送日志文件存放的完整路径，由Worker进程再去共享的磁盘上读取文件。

