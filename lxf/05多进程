# 线程是最小的执行单元，而进程由至少一个线程组成。如何调度进程和线程，完全由操作系统决定，程序自己不能决
# 定什么时候执行，执行多长时间。


# 人人影视 伊甸园 謦灵风软 破烂熊

# 多任务的实现有三种模式：
# 多进程模式
# 多线程模式
# 多进程+多线程模式

# 同时指向多个任务通常需要各个任务之间进行通信和协调

# unix/linux 操作系统提供了一个fork()系统调用，它常特殊。普通的函数调用，调用一次，返回一次，但是fork()调用一次，返回两次
# 因为操作系统把当前进程（成为父进程）复制了一份（成为子进程），然后分别在父进程和子进程内进行返回。
# 子进程永远返回0，而父进程返回子进程的ID，这样做的的理由是，一个父进程可以fork出很多子进程，所以，父进程要记录下每个子进程的ID，
# 而子进程只需要调用getppid()就可以拿到父进程的ID

# Python 的os模块就封装了常见的系统调用，其中就包括fork，可以在python中轻松创建子进程

# 1. 多进程
import os

print('process (%s) start ...' % os.getpid())
# only works on unix/linux/mac
# pid = os.fork()
# if pid == 0:
#     print('I am child process (%s) and my parent is %s' % (os.getpid(), os.getppid()))
# else:
#     print('I (%s) just created a child process (%s)' % (os.getpid(), pid))
# module 'os' has no attribute 'fork'

# 2. multiprocessing
from multiprocessing import Process


def run_proc(name):
    print('run child process %s (%s) ...' % (name, os.getpid()))


if __name__ == '__main__':
    print('parent process %s.' % os.getpid())
    p = Process(target=run_proc, args=('test',))
    print('child process will start.')
    p.start()
    p.join()
    print('child process end.')

# 创建子进程时，只需要传入一个执行函数和函数的参数，创建一个Process实例，用start()方法启动，这样创建比fork()还简单
# join() 方法可以等待子进程结束后再继续向下运行，通常用于进程间的同步

# 3. Pool
# 如果要启动大量的子进程，可以使用进程池的方式批量创建子进程
from multiprocessing import Pool
import os, time, random


def long_time_task(name):
    print('run task %s (%s) ...' % (name, os.getpid()))
    start = time.time()
    time.sleep(random.random() * 3)
    end = time.time()
    print('task %s runs %0.2f seconds .' % (name, (end - start)))


if __name__ == '__main__':
    print('parent process %s .' % os.getpid())
    p = Pool(4)
    for i in range(5):
        p.apply_async(long_time_task, args=(i,))
    print('waitin for all subprocesses done...')
    p.close()
    p.join()
    print('all subpresses done.')


# 对Pool对象调用join()方法会等待所有子进程执行完毕，调用join()之前必须先调用close()，调用close()之后就不能
# 继续添加新的Process了

# 4. subprocess
# 很多时候，子进程并不是自身，而是一个外部进程。我们创建了子进程后，还需要控制子进程的输入和输出。
# subprocess模块可以让我们非常方便地启动一个子进程，然后控制其输入和输出。

import subprocess

# print('$ nslookup www.python.org')
# r = subprocess.call(['nslookup', 'www.baidu.com'])
# print('exit code :', r)

# 如果子进程还需要输入，则可以通过communicate()方法进行输入
print('$ nslookup')
p = subprocess.Popen(['nslookup'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
output, err = p.communicate(b'set q=mx\nbaidu.com\nexit\n')
print(output.decode('gbk'))
print('exit code : ', p.returncode)

# 5. 进程间通信
from multiprocessing import Process, Queue
import os, time, random


# 写数据的代码
def write(q):
    print('process to write : %s' % os.getpid())
    for value in ['A', 'B', 'C']:
        print('put %s to queue...' % value)
        q.put(value)
        time.sleep(random.random())


# 读取数据进行执行的代码
def read(q):
    print('process to read: %s' % os.getpid())
    while True:
        value = q.get(True)
        print('get %s from queue.' % value)


if __name__ == '__main__':
    # 父进程创建Queue，并传给各个子进程
    q = Queue()
    pw = Process(target=write, args=(q,))
    pr = Process(target=read, args=(q,))
    # 启动子进程pw,写入
    pw.start()
    # 启动子进程pr,读取
    pr.start()
    pw.join()
    # pr进程里是死循环，无法等待其结束，只能强制进行终止
    pr.terminate()

# multiprocessing模块封装了fork()调用，使我们不需要关注fork()的细节。由于Windows没有fork调
# 用，因此，multiprocessing需要“模拟”出fork的效果，父进程所有Python对象都必须通过pickle序列化再传到子进程
# 去，所有，如果multiprocessing在Windows下调用失败了，要先考虑是不是pickle失败了。

# 总结
# 在Unix/Linux下，可以使用fork()调用实现多进程。
# 要实现跨平台的多进程，可以使用multiprocessing模块。
# 进程间通信是通过Queue、Pipes等实现的
